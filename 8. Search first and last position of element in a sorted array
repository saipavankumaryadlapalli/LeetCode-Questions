//https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] indices =  binarySearch(nums,0,nums.length-1,target);
        return indices;
    }
    
    private int[] binarySearch(int[] nums, int low, int high,int target) {
        if(low == high) { // if the size is cutdown to 1 check the element
            if(nums[low] == target) return new int[]{low,high};
            else return new int[]{-1,-1};
        }
        if(low > high) { //if the loop exceeeds break it
            return new int[]{-1,-1};
        }
        int mid = (low+high)/2;
        if(nums[mid] == target) { //check until the mid element is the target
            int temp = mid;
            while(mid>=low && nums[mid] == target) { // check for left side for the first position
                mid --;
            }
            while(temp<=high && nums[temp] == target) { // check for right for the last position
                temp++;
            }
            return new int[]{mid+1,temp-1};
        } else if (nums[mid] > target) { // do normal binarysearch breakdowns until the mid is target
            high = mid;
        } else low = mid+1;
        return binarySearch(nums,low,high,target);
    }
}

// Time Complexity: O(logn);
// Space Complexity: O(n);
