https://leetcode.com/problems/design-hashset/

class MyHashSet {

    ListNode[] hashSet = new ListNode[1000];
    
    public MyHashSet() {
        
    }
    
    public void add(int key) {
        int index = getIndex(key);
        ListNode prevNode = findNode(index,key); // prevNode next will be null if the same element is not found
        if(prevNode.next == null) { // add only if key not exists
            prevNode.next = new ListNode(key);
        }
    }
    
    public void remove(int key) {
        int index = getIndex(key);
        ListNode prevNode = findNode(index,key); //prevNode next will be null if the same element is not found
        if(prevNode.next != null) {
            prevNode.next = prevNode.next.next;
        }
    }
    
    public boolean contains(int key) {
        int index = getIndex(key);
        ListNode prevNode = findNode(index,key); //prevNode next will be null if the same element is not found
        if(prevNode.next == null) return false;
        else return true;
    }
    
    private int getIndex(int key) {
        return key % hashSet.length;
    }
    
    private ListNode findNode(int index,int key) {
        if(hashSet[index] == null) {
            return hashSet[index] = new ListNode(-1); // if null start every index with dummy node -1
        }
        ListNode prev = hashSet[index];
        while(prev.next != null && prev.next.key != key ) { //loop until we find the required node and stop on the prev node
            prev = prev.next;
        }
        return prev;
    }
    
    private static class ListNode {
        int key;
        ListNode next;
        ListNode(int key) {
            this.key = key;
            this.next = null;
        }
    }
}

Time Complexity: O(n);
SpaceComplexity: O(n);

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */
